'''
Your program should take as input a binary image, “wall1.png,” shown in Figure 2 (b). This is a binary image generated by 
a machine-learning method, showing pixels that may be part of a crack as black pixels. Your program should:
    (1) Apply dilation and erosion operations to the input image to turn black regions into clean blobs. Name the new image,
        “wall1-blobs.png,” and save the file,
    (2) Detect blobs and their contours; create an image that shows blob contours with randomly assigned colors, name the
        image,”wall1-contours.png,” and save the file,
    (3) Define your own thresholds for detecting cracks, and apply the thresholds to the blobs to keep only the blobs that
        are likely to be actual cracks,
    (4) For each blob that is likely to be an actual crack, find its central axis by thinning operations. Create an image 
        that shows the central axis, name the image, “wall1-cracks,png,” and save the file,

Note to self: be sure to run "conda activate cve" before running this file

'''


import cv2
import os
import numpy as np
import random as rand

def get_roundess(area, perimeter):
    return (4*np.pi*area)/(perimeter*perimeter)

# get file input
print("Greetings! What photo would you like to edit? Your options are: ")
for file_names in os.listdir():
    if file_names.endswith(".png") or file_names.endswith(".jpg"):
        print("\t" + file_names)
input_file = input("\n input file: ")
img = cv2.imread(input_file)
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) 


# extracting extension and file base name
extension = input_file[-4:]
input_file = input_file[:-4]

# generating clean blobs
k_e = cv2.getStructuringElement(cv2.MORPH_RECT, (3,3))
k_e_sm= cv2.getStructuringElement(cv2.MORPH_RECT, (1,1))
# blobs = cv2.morphologyEx(img, cv2.MORPH_OPEN, k_e)
blobs = cv2.dilate(cv2.bitwise_not(img), k_e) #need to invert for dilation/erosion operations
blobs = cv2.erode(blobs, k_e_sm, iterations=3 )
blobs = cv2.bitwise_not(blobs) #inverting 

# identifying contours
colored_contours = 255*np.ones((blobs.shape[0], blobs.shape[1],3), dtype=np.uint8) #cv2.cvtColor(blobs,cv2.COLOR_GRAY2BGR)
ret, thresh = cv2.threshold(cv2.bitwise_not(blobs), 127, 255, 0)
contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# drawing with random colors
# cv2.drawContours(colored_contours, contours, -1,(rand.randint(0, 255), rand.randint(0, 255), rand.randint(0, 255)) ,  thickness=1)
for c in range(len(contours)):
    cv2.drawContours(colored_contours, contours, c,(rand.randint(0, 255), rand.randint(0, 255), rand.randint(0, 255)) ,  thickness=cv2.FILLED)


candidates = 255*np.ones((blobs.shape[0], blobs.shape[1],1), dtype=np.uint8) #cv2.cvtColor(blobs,cv2.COLOR_GRAY2BGR)
# identifying candidate cracks
for c in range(len(contours)):
    temp_contour = contours[c]
    area = cv2.contourArea(temp_contour)
    perimeter = cv2.arcLength(temp_contour,True)
    print(str(c) + ": " + str(area) + " " + str(perimeter) + " " + str(get_roundess(area,perimeter)))
    if(get_roundess(area,perimeter) < 0.2):
        cv2.drawContours(candidates, contours, c,(0) ,  thickness=cv2.FILLED)


# Thinning, last step
# # Important: Reverse image (black background)
# img_inv = cv2.bitwise_not(img) #saved for comparison
# img1 = cv2.bitwise_not(img)
# # Kernel: 4 neighbor
# k_e = cv2.getStructuringElement(cv2.MORPH_CROSS, (1,1))
# # Target image
# thin = np.zeros(img.shape, dtype=np.uint8)
# # repeat until no white area
# while cv2.countNonZero(img1) != 0:
#     er = cv2.erode(img1, k_e)
#     # OPEN: erosion then dilation (remove noise)
#     op = cv2.morphologyEx(er, cv2.MORPH_OPEN,k_e)
#     subset = er - op
#     thin = cv2.bitwise_or(subset, thin)
#     img1 = er.copy()



cv2.namedWindow("input", cv2.WINDOW_NORMAL )
cv2.namedWindow("blobs", cv2.WINDOW_NORMAL )
cv2.namedWindow("contours", cv2.WINDOW_NORMAL )
cv2.namedWindow("candidates", cv2.WINDOW_NORMAL )


cv2.imshow("input", img)
cv2.imshow("blobs", blobs)
cv2.imshow("contours", colored_contours)
cv2.imshow("candidates", candidates)


cv2.imwrite(input_file+"-blobs"+extension, blobs)
cv2.imwrite(input_file+"-contours"+extension, colored_contours)
# cv2.imwrite(input_file+"-cracks"+extension, thin)



cv2.waitKey(0)
cv2.destroyAllWindows()